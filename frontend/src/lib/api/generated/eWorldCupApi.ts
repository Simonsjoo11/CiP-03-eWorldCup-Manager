/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * EWorldCup.Api
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  GetRoundsMaxParams,
  ParticipantsResponse,
  PlayerRoundResponse,
  PlayerScheduleResponse,
  RemainingPairsResponse,
  RoundResponse,
} from './model';

export const getMatchPlayerIndexRoundNumber = (
  playerIndex: number,
  roundNumber: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PlayerRoundResponse>> => {
  return axios.get(`http://localhost:5296/match/${playerIndex}/${roundNumber}`, options);
};

export const getGetMatchPlayerIndexRoundNumberQueryKey = (
  playerIndex?: number,
  roundNumber?: number,
) => {
  return [`http://localhost:5296/match/${playerIndex}/${roundNumber}`] as const;
};

export const getGetMatchPlayerIndexRoundNumberQueryOptions = <
  TData = Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  roundNumber: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMatchPlayerIndexRoundNumberQueryKey(playerIndex, roundNumber);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>> = ({
    signal,
  }) => getMatchPlayerIndexRoundNumber(playerIndex, roundNumber, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(playerIndex && roundNumber),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMatchPlayerIndexRoundNumberQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>
>;
export type GetMatchPlayerIndexRoundNumberQueryError = AxiosError<unknown>;

export function useGetMatchPlayerIndexRoundNumber<
  TData = Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  roundNumber: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>,
          TError,
          Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMatchPlayerIndexRoundNumber<
  TData = Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  roundNumber: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>,
          TError,
          Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMatchPlayerIndexRoundNumber<
  TData = Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  roundNumber: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetMatchPlayerIndexRoundNumber<
  TData = Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  roundNumber: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMatchPlayerIndexRoundNumber>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMatchPlayerIndexRoundNumberQueryOptions(
    playerIndex,
    roundNumber,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getMatchRemainingParticipantCountRoundsPlayed = (
  participantCount: number,
  roundsPlayed: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RemainingPairsResponse>> => {
  return axios.get(
    `http://localhost:5296/match/remaining/${participantCount}/${roundsPlayed}`,
    options,
  );
};

export const getGetMatchRemainingParticipantCountRoundsPlayedQueryKey = (
  participantCount?: number,
  roundsPlayed?: number,
) => {
  return [`http://localhost:5296/match/remaining/${participantCount}/${roundsPlayed}`] as const;
};

export const getGetMatchRemainingParticipantCountRoundsPlayedQueryOptions = <
  TData = Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
  TError = AxiosError<unknown>,
>(
  participantCount: number,
  roundsPlayed: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetMatchRemainingParticipantCountRoundsPlayedQueryKey(participantCount, roundsPlayed);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>
  > = ({ signal }) =>
    getMatchRemainingParticipantCountRoundsPlayed(participantCount, roundsPlayed, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(participantCount && roundsPlayed),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMatchRemainingParticipantCountRoundsPlayedQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>
>;
export type GetMatchRemainingParticipantCountRoundsPlayedQueryError = AxiosError<unknown>;

export function useGetMatchRemainingParticipantCountRoundsPlayed<
  TData = Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
  TError = AxiosError<unknown>,
>(
  participantCount: number,
  roundsPlayed: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
          TError,
          Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMatchRemainingParticipantCountRoundsPlayed<
  TData = Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
  TError = AxiosError<unknown>,
>(
  participantCount: number,
  roundsPlayed: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
          TError,
          Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMatchRemainingParticipantCountRoundsPlayed<
  TData = Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
  TError = AxiosError<unknown>,
>(
  participantCount: number,
  roundsPlayed: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetMatchRemainingParticipantCountRoundsPlayed<
  TData = Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
  TError = AxiosError<unknown>,
>(
  participantCount: number,
  roundsPlayed: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMatchRemainingParticipantCountRoundsPlayed>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMatchRemainingParticipantCountRoundsPlayedQueryOptions(
    participantCount,
    roundsPlayed,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getParticipants = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ParticipantsResponse>> => {
  return axios.get(`http://localhost:5296/participants`, options);
};

export const getGetParticipantsQueryKey = () => {
  return [`http://localhost:5296/participants`] as const;
};

export const getGetParticipantsQueryOptions = <
  TData = Awaited<ReturnType<typeof getParticipants>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getParticipants>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetParticipantsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getParticipants>>> = ({ signal }) =>
    getParticipants({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getParticipants>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetParticipantsQueryResult = NonNullable<Awaited<ReturnType<typeof getParticipants>>>;
export type GetParticipantsQueryError = AxiosError<unknown>;

export function useGetParticipants<
  TData = Awaited<ReturnType<typeof getParticipants>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getParticipants>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getParticipants>>,
          TError,
          Awaited<ReturnType<typeof getParticipants>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetParticipants<
  TData = Awaited<ReturnType<typeof getParticipants>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getParticipants>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getParticipants>>,
          TError,
          Awaited<ReturnType<typeof getParticipants>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetParticipants<
  TData = Awaited<ReturnType<typeof getParticipants>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getParticipants>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetParticipants<
  TData = Awaited<ReturnType<typeof getParticipants>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getParticipants>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetParticipantsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPlayerPlayerIndexSchedule = (
  playerIndex: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PlayerScheduleResponse>> => {
  return axios.get(`http://localhost:5296/player/${playerIndex}/schedule`, options);
};

export const getGetPlayerPlayerIndexScheduleQueryKey = (playerIndex?: number) => {
  return [`http://localhost:5296/player/${playerIndex}/schedule`] as const;
};

export const getGetPlayerPlayerIndexScheduleQueryOptions = <
  TData = Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPlayerPlayerIndexScheduleQueryKey(playerIndex);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>> = ({
    signal,
  }) => getPlayerPlayerIndexSchedule(playerIndex, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!playerIndex, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPlayerPlayerIndexScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>
>;
export type GetPlayerPlayerIndexScheduleQueryError = AxiosError<unknown>;

export function useGetPlayerPlayerIndexSchedule<
  TData = Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>,
          TError,
          Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPlayerPlayerIndexSchedule<
  TData = Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>,
          TError,
          Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPlayerPlayerIndexSchedule<
  TData = Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetPlayerPlayerIndexSchedule<
  TData = Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlayerPlayerIndexSchedule>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPlayerPlayerIndexScheduleQueryOptions(playerIndex, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPlayerPlayerIndexRound = (
  playerIndex: number,
  round: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PlayerRoundResponse>> => {
  return axios.get(`http://localhost:5296/player/${playerIndex}/${round}`, options);
};

export const getGetPlayerPlayerIndexRoundQueryKey = (playerIndex?: number, round?: number) => {
  return [`http://localhost:5296/player/${playerIndex}/${round}`] as const;
};

export const getGetPlayerPlayerIndexRoundQueryOptions = <
  TData = Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  round: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPlayerPlayerIndexRoundQueryKey(playerIndex, round);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>> = ({
    signal,
  }) => getPlayerPlayerIndexRound(playerIndex, round, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(playerIndex && round),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetPlayerPlayerIndexRoundQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>
>;
export type GetPlayerPlayerIndexRoundQueryError = AxiosError<unknown>;

export function useGetPlayerPlayerIndexRound<
  TData = Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  round: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>,
          TError,
          Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPlayerPlayerIndexRound<
  TData = Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  round: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>,
          TError,
          Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPlayerPlayerIndexRound<
  TData = Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  round: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetPlayerPlayerIndexRound<
  TData = Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>,
  TError = AxiosError<unknown>,
>(
  playerIndex: number,
  round: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlayerPlayerIndexRound>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPlayerPlayerIndexRoundQueryOptions(playerIndex, round, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRoundsMax = (
  params?: GetRoundsMaxParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`http://localhost:5296/rounds/max`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetRoundsMaxQueryKey = (params?: GetRoundsMaxParams) => {
  return [`http://localhost:5296/rounds/max`, ...(params ? [params] : [])] as const;
};

export const getGetRoundsMaxQueryOptions = <
  TData = Awaited<ReturnType<typeof getRoundsMax>>,
  TError = AxiosError<unknown>,
>(
  params?: GetRoundsMaxParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoundsMax>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRoundsMaxQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoundsMax>>> = ({ signal }) =>
    getRoundsMax(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRoundsMax>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRoundsMaxQueryResult = NonNullable<Awaited<ReturnType<typeof getRoundsMax>>>;
export type GetRoundsMaxQueryError = AxiosError<unknown>;

export function useGetRoundsMax<
  TData = Awaited<ReturnType<typeof getRoundsMax>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetRoundsMaxParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoundsMax>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoundsMax>>,
          TError,
          Awaited<ReturnType<typeof getRoundsMax>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoundsMax<
  TData = Awaited<ReturnType<typeof getRoundsMax>>,
  TError = AxiosError<unknown>,
>(
  params?: GetRoundsMaxParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoundsMax>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoundsMax>>,
          TError,
          Awaited<ReturnType<typeof getRoundsMax>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoundsMax<
  TData = Awaited<ReturnType<typeof getRoundsMax>>,
  TError = AxiosError<unknown>,
>(
  params?: GetRoundsMaxParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoundsMax>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetRoundsMax<
  TData = Awaited<ReturnType<typeof getRoundsMax>>,
  TError = AxiosError<unknown>,
>(
  params?: GetRoundsMaxParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoundsMax>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetRoundsMaxQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRoundsRoundNumber = (
  roundNumber: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RoundResponse>> => {
  return axios.get(`http://localhost:5296/rounds/${roundNumber}`, options);
};

export const getGetRoundsRoundNumberQueryKey = (roundNumber?: number) => {
  return [`http://localhost:5296/rounds/${roundNumber}`] as const;
};

export const getGetRoundsRoundNumberQueryOptions = <
  TData = Awaited<ReturnType<typeof getRoundsRoundNumber>>,
  TError = AxiosError<unknown>,
>(
  roundNumber: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoundsRoundNumber>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRoundsRoundNumberQueryKey(roundNumber);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoundsRoundNumber>>> = ({ signal }) =>
    getRoundsRoundNumber(roundNumber, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!roundNumber, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRoundsRoundNumber>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRoundsRoundNumberQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRoundsRoundNumber>>
>;
export type GetRoundsRoundNumberQueryError = AxiosError<unknown>;

export function useGetRoundsRoundNumber<
  TData = Awaited<ReturnType<typeof getRoundsRoundNumber>>,
  TError = AxiosError<unknown>,
>(
  roundNumber: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoundsRoundNumber>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoundsRoundNumber>>,
          TError,
          Awaited<ReturnType<typeof getRoundsRoundNumber>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoundsRoundNumber<
  TData = Awaited<ReturnType<typeof getRoundsRoundNumber>>,
  TError = AxiosError<unknown>,
>(
  roundNumber: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoundsRoundNumber>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoundsRoundNumber>>,
          TError,
          Awaited<ReturnType<typeof getRoundsRoundNumber>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetRoundsRoundNumber<
  TData = Awaited<ReturnType<typeof getRoundsRoundNumber>>,
  TError = AxiosError<unknown>,
>(
  roundNumber: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoundsRoundNumber>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetRoundsRoundNumber<
  TData = Awaited<ReturnType<typeof getRoundsRoundNumber>>,
  TError = AxiosError<unknown>,
>(
  roundNumber: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoundsRoundNumber>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetRoundsRoundNumberQueryOptions(roundNumber, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
